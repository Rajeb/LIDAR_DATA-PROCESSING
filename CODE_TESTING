
### Creating square around points
def sq_buffer(x,y,sq_len):
    if type(x) == float:
        xl = x-sq_len/2
        xu = x+sq_len/2
        yl = y-sq_len/2
        yu = y+sq_len/2
        res = (xl,xu,yl,yu)
    else:
        res = []
        for a,b in zip(x,y):
            xl = a-sq_len/2
            xu = a+sq_len/2
            yl = b-sq_len/2
            yu = b+sq_len/2            
            res.append((xl,xu,yl,yu))
    return res


def extract_shape_cp(pointcloud, x, y ,sq_len, geom_buff = 'Circle', buff_radius = 10 , crs = "EPSG:6418"):
    '''
    buff_radius in feet !!! (since point clouds are in feet)
    '''
    
    
    #Extracting square shape from point cloud 
    (xl,xu,yl,yu) = sq_buffer(x,y,sq_len)
    mask_x = (pointcloud[:,0] > xl) & (pointcloud[:,0] < xu)
    mask_y = (pointcloud[:,1] > yl) & (pointcloud[:,1] < yu)
    sub_ix = np.where(mask_x & mask_y)
    sub_sq = pointcloud[sub_ix,:]
    sub_sq = np.squeeze(sub_sq)
    
    #Extracting given shape (geom_buff) from square shape
    gdf_sub = pd.DataFrame({'x':sub_sq[:,0],'y':sub_sq[:,1],'ix':sub_ix[0]})
    gdf_sub = gpd.GeoDataFrame(gdf_sub, geometry=gpd.points_from_xy(gdf_sub.x, gdf_sub.y), crs=crs)
    
    if geom_buff == 'Circle':
        circle_buff = gdf_sub.geometry.buffer(buff_radius)
        mask = gdf_sub.geometry.within(circle_buff)
        sub_shape = pointcloud[gdf_sub.ix[mask],:]
    else:
        if type(geom_buff) == str:
            geom_buff = shapely.wkt.loads(geom_buff)
        
        mask = gdf_sub.geometry.within(geom_buff)
        sub_shape = pointcloud[gdf_sub.ix[mask],:]
    
    return sub_shape
###########

# list all .laz files in the bucket
response = s3.list_objects_v2(Bucket=bucket_name, Prefix=file_path)
laz_files = [content['Key'] for content in response.get('Contents',[]) if content['Key'].endswith('.laz')]
selected_files =(laz_files[0:50])

## extract bounding box of .lazfile
def get_laz_bounds(file_path, target_crs ="EPSG: 4326"):
    with laspy.open(file_path) as las:
        header = las.header
        xmin, ymin, zmin = header.mins
        xmax, ymax, zmax = header.maxs
        source_crs= " EPSG: 6416"
        transformer = Transformer.from_crs(source_crs, target_crs, always_xy=True)
        (xmin, ymin) = transformer.transform(xmin,ymin)
        (xmax, ymax) = transformer.transform(xmax,ymax)
        return {
            'xmin': header.mins[0],
            'xmax':header.max[0],
            'ymin':header.mins[1],
            'ymax':header.maxs[1]
        }

laz_bounds = {}
for laz_file in selected_files:
    # print(laz_file)laz
    local_path =f"/tmp/{laz_file.split('/')[-1]}"
    # print(local_path)
    las = laspy.read(local_path)
#     crs_info = las.header.vlrs.get("WktCoordinateSystemVlr")
    
#     if crs_info:
#         print("CRS (WKT):", crs.info.string)
#     else: 
#         print("NO")
    s3.download_file(bucket_name, laz_file, local_path)
    laz_bounds[laz_file] =get_laz_bounds(local_path)
    # laz_data.append({'geometry':laz_bounds, "file": laz_file})
    laz_gdf = gpd.GeoDataFrame(laz_data)
    # print(laz_bounds)

clean_structure = pd.read_csv(r"/data/transmission/WTRM/asset_structure/clean_structure.csv", low_memory=False)
gdf_structure = gpd.GeoDataFrame(clean_structure, geometry=gpd.points_from_xy(clean_structure["longitude"], 
                                                                              clean_structure["latitude"]),
                                                                                crs="EPSG:4326"
                                )
print(f"CRS of the shapefile: {gdf_structure.crs}")    


laz_df = pd.DataFrame(laz_bounds).T.reset_index()
laz_df.columns=['file', 'xmin', 'xmax', 'ymin', 'ymax']
gdf_laz = gpd.GeoDataFrame(
    laz_df, geometry =[box(row['xmin'], row['ymin'],row['xmax'],row['ymax']) for _, row in laz_df.iterrows()],
    crs="EPSG:4326"
       
)

result = gpd.sjoin(gdf_structure, gdf_laz, how ='inner', predicate = "within")







