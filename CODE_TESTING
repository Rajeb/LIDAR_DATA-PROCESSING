
### Creating square around points
def sq_buffer(x,y,sq_len):
    if type(x) == float:
        xl = x-sq_len/2
        xu = x+sq_len/2
        yl = y-sq_len/2
        yu = y+sq_len/2
        res = (xl,xu,yl,yu)
    else:
        res = []
        for a,b in zip(x,y):
            xl = a-sq_len/2
            xu = a+sq_len/2
            yl = b-sq_len/2
            yu = b+sq_len/2            
            res.append((xl,xu,yl,yu))
    return res


def extract_shape_cp(pointcloud, x, y ,sq_len, geom_buff = 'Circle', buff_radius = 10 , crs = "EPSG:6418"):
    '''
    buff_radius in feet !!! (since point clouds are in feet)
    '''
    
    
    #Extracting square shape from point cloud 
    (xl,xu,yl,yu) = sq_buffer(x,y,sq_len)
    mask_x = (pointcloud[:,0] > xl) & (pointcloud[:,0] < xu)
    mask_y = (pointcloud[:,1] > yl) & (pointcloud[:,1] < yu)
    sub_ix = np.where(mask_x & mask_y)
    sub_sq = pointcloud[sub_ix,:]
    sub_sq = np.squeeze(sub_sq)
    
    #Extracting given shape (geom_buff) from square shape
    gdf_sub = pd.DataFrame({'x':sub_sq[:,0],'y':sub_sq[:,1],'ix':sub_ix[0]})
    gdf_sub = gpd.GeoDataFrame(gdf_sub, geometry=gpd.points_from_xy(gdf_sub.x, gdf_sub.y), crs=crs)
    
    if geom_buff == 'Circle':
        circle_buff = gdf_sub.geometry.buffer(buff_radius)
        mask = gdf_sub.geometry.within(circle_buff)
        sub_shape = pointcloud[gdf_sub.ix[mask],:]
    else:
        if type(geom_buff) == str:
            geom_buff = shapely.wkt.loads(geom_buff)
        
        mask = gdf_sub.geometry.within(geom_buff)
        sub_shape = pointcloud[gdf_sub.ix[mask],:]
    
    return sub_shape
###########

import boto3
import laspy
import geopandas as gpd
from shapely.geometry import box
from pyproj import Transformer
import pandas as pd

# S3 client setup
s3 = boto3.client('s3')

# List .laz files in the bucket
response = s3.list_objects_v2(Bucket=bucket_name, Prefix=file_path)
laz_files = [content['Key'] for content in response.get('Contents', []) if content['Key'].endswith('.laz')]
selected_files = laz_files[:50]  # Select first 50 files

# Function to extract bounding box from .laz files
def get_laz_bounds(file_path, target_crs="EPSG:4326"):
    with laspy.open(file_path) as las:
        header = las.header
        xmin, ymin, zmin = header.mins
        xmax, ymax, zmax = header.maxs
        
        # Transform coordinates to target CRS
        source_crs = "EPSG:6416"
        transformer = Transformer.from_crs(source_crs, target_crs, always_xy=True)
        xmin, ymin = transformer.transform(xmin, ymin)
        xmax, ymax = transformer.transform(xmax, ymax)
        
        return {'xmin': xmin, 'xmax': xmax, 'ymin': ymin, 'ymax': ymax}

# Extract bounding boxes for selected .laz files
laz_bounds = {}
for laz_file in selected_files:
    local_path = f"/tmp/{laz_file.split('/')[-1]}"
    s3.download_file(bucket_name, laz_file, local_path)
    laz_bounds[laz_file] = get_laz_bounds(local_path)

# Convert bounding boxes to GeoDataFrame
laz_df = pd.DataFrame.from_dict(laz_bounds, orient='index').reset_index()
laz_df.columns = ['file', 'xmin', 'xmax', 'ymin', 'ymax']
gdf_laz = gpd.GeoDataFrame(
    laz_df,
    geometry=[box(row['xmin'], row['ymin'], row['xmax'], row['ymax']) for _, row in laz_df.iterrows()],
    crs="EPSG:4326"
)

# Load structure data
clean_structure = pd.read_csv(r"/data/transmission/WTRM/asset_structure/clean_structure.csv", low_memory=False)
gdf_structure = gpd.GeoDataFrame(
    clean_structure,
    geometry=gpd.points_from_xy(clean_structure["longitude"], clean_structure["latitude"]),
    crs="EPSG:4326"
)

# Debug: Print CRS and sample data
print(f"CRS of structure GeoDataFrame: {gdf_structure.crs}")
print(f"CRS of LAZ GeoDataFrame: {gdf_laz.crs}")

# Perform spatial join
result = gpd.sjoin(gdf_structure, gdf_laz, how='inner', predicate='within')

# Debugging: Check results
print(f"Number of matching geometries: {len(result)}")
print(result)







########################################
import laspy
import numpy as np
import plotly.graph_objects as go
from shapely.geometry import Point
from pyproj import Transformer

# Specify the structure number
structure_no = "A"

# Filter the result DataFrame for the specific structure
filtered_result = result[result['structure_no'] == structure_no]

if filtered_result.empty:
    print(f"No associated .laz file found for structure {structure_no}")
else:
    # Extract the structure's latitude, longitude, and associated .laz file
    structure_row = filtered_result.iloc[0]
    laz_file = structure_row['file']
    structure_lat = structure_row['latitude']
    structure_lon = structure_row['longitude']

    # Transform structure coordinates to match the .laz file CRS
    source_crs = "EPSG:4326"  # Assuming structure coordinates are in EPSG:4326
    target_crs = "EPSG:6416"  # Replace with the CRS of your .laz file
    transformer = Transformer.from_crs(source_crs, target_crs, always_xy=True)
    transformed_lon, transformed_lat = transformer.transform(structure_lon, structure_lat)
    structure_point = Point(transformed_lon, transformed_lat)

    # Create a 10-meter buffer around the structure
    buffer = structure_point.buffer(10)

    print(f"Processing .laz file: {laz_file} for structure {structure_no} within 10-meter buffer")

    # Function to extract and plot points within the buffer using Plotly
    def extract_and_plot_with_plotly(laz_file, buffer):
        # Download the .laz file from S3
        local_path = f"/tmp/{laz_file.split('/')[-1]}"
        s3.download_file(bucket_name, laz_file, local_path)

        # Read the .laz file
        with laspy.open(local_path) as las:
            points = las.read()
            x, y, z = points.x, points.y, points.z  # Extract coordinates

        # Filter points within the buffer
        filtered_points = [
            (xi, yi, zi) for xi, yi, zi in zip(x, y, z) if buffer.contains(Point(xi, yi))
        ]

        if not filtered_points:
            print("No points found within the buffer")
            return

        # Separate filtered points into x, y, z arrays
        x_f, y_f, z_f = zip(*filtered_points)

        # Plot the filtered point cloud using Plotly
        fig = go.Figure(
            data=[
                go.Scatter3d(
                    x=x_f, y=y_f, z=z_f,
                    mode='markers',
                    marker=dict(
                        size=2,
                        color=z_f,  # Use z-coordinate for color
                        colorscale='Viridis',
                        opacity=0.8
                    )
                )
            ]
        )
        fig.update_layout(
            title=f"Point Cloud: {laz_file} for Structure {structure_no} (10m buffer)",
            scene=dict(
                xaxis_title='X',
                yaxis_title='Y',
                zaxis_title='Z'
            ),
        )
        fig.show()

    # Extract and plot the points within the buffer
    extract_and_plot_with_plotly(laz_file, buffer)



################################
Spatial indexing method

import laspy
import geopandas as gpd
from shapely.geometry import Point, box
from rtree import index
import plotly.graph_objects as go

# Load result dataframe containing structure and .laz file associations
structure_id = "A"  # Example for Structure A
structure_row = result_df[result_df["structure_id"] == structure_id].iloc[0]

# Extract Structure A location (latitude and longitude)
structure_lat = structure_row["latitude"]
structure_lon = structure_row["longitude"]

# Build buffer around Structure A (10 meters)
structure_point = Point(structure_lon, structure_lat)
buffer = structure_point.buffer(10)

# Get the associated .laz file
laz_file = structure_row["file"]

# Download the .laz file locally
local_path = f"/tmp/{laz_file.split('/')[-1]}"
s3.download_file(bucket_name, laz_file, local_path)

# Function to build R-tree spatial index
def build_spatial_index(x, y):
    spatial_idx = index.Index()
    for idx, (xi, yi) in enumerate(zip(x, y)):
        spatial_idx.insert(idx, (xi, yi, xi, yi))
    return spatial_idx

# Process .laz file
def filter_laz_points_within_buffer(local_path, buffer):
    with laspy.open(local_path) as las:
        # Read coordinates
        x, y, z = las.x, las.y, las.z

        # Build spatial index for fast filtering
        spatial_idx = build_spatial_index(x, y)

        # Get bounding box of the buffer
        buffer_bounds = buffer.bounds  # (min_x, min_y, max_x, max_y)

        # Find candidate points using bounding box
        candidate_indices = list(spatial_idx.intersection(buffer_bounds))

        # Filter candidates to points inside the actual buffer
        filtered_points = [
            (x[i], y[i], z[i])
            for i in candidate_indices
            if buffer.contains(Point(x[i], y[i]))
        ]

        return filtered_points

# Filter points within the buffer
filtered_points = filter_laz_points_within_buffer(local_path, buffer)

# Extract filtered points for visualization
x_f, y_f, z_f = zip(*filtered_points)

# Plot using Plotly
fig = go.Figure()

# Add 3D scatter plot
fig.add_trace(
    go.Scatter3d(
        x=x_f, y=y_f, z=z_f,
        mode='markers',
        marker=dict(
            size=2,
            color=z_f,
            colorscale='Viridis',
            opacity=0.8
        )
    )
)

# Configure layout
fig.update_layout(
    scene=dict(
        xaxis_title="Longitude",
        yaxis_title="Latitude",
        zaxis_title="Elevation (m)"
    ),
    title=f"Point Cloud Around Structure {structure_id} (10m Buffer)"
)

# Show the plot
fig.show()
